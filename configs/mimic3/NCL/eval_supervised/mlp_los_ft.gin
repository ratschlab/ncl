import eval.architectures.losses
import eval.architectures.classifiers
import model.architectures.critics
import model.architectures.losses
import model.architectures.transformations
import model.architectures.optimizers
import model.architectures.encoders


# Eval characteristics
eval_task.task = @addon_binned_classification()
eval_task.training_steps = 1000000
eval_task.validation_config = {'frequency': -1}
eval_task.dataset = @ICU_loader_SCL()
eval_task.gen_type = 'iterate'
eval_task.augmentations = []

# Dataset configuration

ICU_loader_SCL.on_RAM = True
ICU_loader_SCL.shuffle = True
ICU_loader_SCL.batch_size = 2048
ICU_loader_SCL.balance = False
ICU_loader_SCL.task = 'los'

e/simple_TCN.do = 0.0
e/simple_TCN.static_do = 0.0


# Task configuration
addon_binned_classification.representation_model = @load_representation()
load_representation.load_weights = True
addon_binned_classification.classifier = @MLP_classifier()
addon_binned_classification.loss_fn = @cross_entropy
addon_binned_classification.bins = [24,48,72,96,120,144,168,192,336]
addon_binned_classification.optimizer = @Adam()

addon_binned_classification.patience = 20
addon_binned_classification.stopping_metric ='loss'
addon_binned_classification.end_to_end = True
addon_binned_classification.grad_clip = None


# Add-on Classifier configuration
MLP_classifier.embedding_shape = (64,)
MLP_classifier.nb_class = 10
# Optimizers configuration
Adam.lr = 1e-5

